stephengrider.github.io/JSPlaygrounds

~/INTERVIEW/Excercises$ npm install -g jest

You have to be right in execises folder to run correctly.
~/INTERVIEW/Excercises/exercises$ jest reversestring/test.js --watch

1. reversestring (LINEAR RUNTIME)
2. palindrome
3. reverseint
4. maxchar // Iterate an object by using 'let char in'
5. fizzbuzz
6. chunk
7. anagrams (likely to be asked)
8. capitalize
9. steps
10. pyramid
11. vowels
12. matrix spiral
13. Runtime Complexity Fibonacci
14. Queue
15. Queue Weaving. (IGNORE)
16. stack
17. qfroms -- Two Become One -- Queue From Stack Question.
18. Find the Midpoint.
19. Detecting Linked List Loops
20. tree
21. levelwidth -- tree
22. bst -- binary search tree

Runtime complexity describes how performant an algorithm is.
    How much more processing power/time is required to run  your algorithm if we double/increase the inputs?
    reversestring (LINEAR RUNTIME because it had one basic for loop aka 1-to-1 relationship between amount work to do versus the input)
    steps had more than one for loop and were nested, which is N^N(quadratic runtime)
    NEVER suggest exponential time for Determining Complexity. 

Memoization can dramatically increase performance for recursion code. 
It avoids calling the same function multiple times with the same set of arguments each time.

Queue Class uses an array 

Big difference between a queue and a stack is the order in which the items are removed.
    - Queue is FIFO.
    - Stack is FILO.
        Stack Methods:
            - push: Add a record to the stack.
            - pop: Remove the "top" record in the stack.
            - peek: Return the "top" record without popping it.

Queues and stack questions are rarely asked in interview questions so instead you see questions where they ask you to use a queue or stack.

You cannot iterate through a queue you have to use peek().

Linked Lists can be referred to as a chain of nodes.

null and arrays are objects in JS.

Unlike a list for a tree you have to be specific of what node you want to add data to.